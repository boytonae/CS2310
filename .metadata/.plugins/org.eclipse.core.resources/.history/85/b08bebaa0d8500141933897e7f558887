package bibleApp;

import java.util.HashMap;
import java.util.LinkedList;
import exceptions.ChapterOutOfRangeException;

/**
 * 
 * @author Norfolk-in-Chance (Thomas Slate, Jack Taylor, Abigail Boyton)
 */
public class Book
{
	private String title;
	private HashMap<String, Segment> segments;
	 
	public Book(String name, HashMap<String, Segment> segments)
	{
		title = name;
		this.segments = segments;
	}
	public String toString()
	{
		return null;
	}
	public Segment getSegment(String index) throws ChapterOutOfRangeException
	{
		if(segments.get(index) != null)
		{
			return segments.get(index);
		}
		throw new ChapterOutOfRangeException(index);
	}
	public int find(String search)
	{
		LinkedList<String> results = new LinkedList<String>();
		int i = 0;
		int total = 0;									//I was thinking maybe instead of just returning a linkedlist and traversing the structure to get the size, the top thing inside of it would be made to be the size as a string then using ParseInt to extract the size therfore increasing the efficiency to o(1) to get the size instead of o(n)
		while (segments.containsKey(i)){
			segments.get(i).find(search, results);
			
		}
		return total;
				
	}
}